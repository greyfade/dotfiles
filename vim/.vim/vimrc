" Light backgrounds hurt my eyes.
set background=dark

let $NVIM_TUI_ENABLE_TRUE_COLOR=1 " True gui colors in terminal

" I speel gud, but I mkae tyops all the tiem.
set spell spelllang=en_us

" VI est mortuus. Vim vivat.
set nocompatible

" May as well...
set mouse=a

" Syntax coloring is a set of guideposts.
syntax on
filetype on
filetype plugin on
filetype indent on

set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"

" 4-column tabs is the One True Way.
set ts=4 sw=4 sts=4

" ... But some people have a hard time being consistent.
set list listchars=tab:>-,trail:-
" I can't count.
set number

" Fold settings {{{
set foldenable
set foldclose=all " Close folds if you leave them in any way
set foldcolumn=1 " Show the foldcolumn
set foldlevel=0 " Autofold everything by default
set foldmethod=syntax " Fold on the syntax
set foldnestmax=3
set foldopen=all " Open folds if you touch them in any way
" }}}

" Convenience makes my fingers happy.
map <F8> <ESC>:silent make\|cwindow\|redraw!<cr>
imap <F8> <ESC>:silent make\|cwindow\|redraw!<cr>a
" map <F12> <ESC>:cn<CR>
nmap <leader>g :silent !grunt hogan coffee less<CR><C-L>

" This seemed like a good idea, but it'll probably only encourage bad habits.
"command! -bang E e<bang>
"command! -bang Q q<bang>
"command! -bang W w<bang>
"command! -bang QA qa<bang>
"command! -bang Qa qa<bang>
"command! -bang Wa wa<bang>
"command! -bang WA wa<bang>
"command! -bang Wq wq<bang>
"command! -bang WQ wq<bang>

" A GVim thing.
set title
if has("gui_running")
	set go=aegirLt
endif

" I'm forgetful.
set history=1000

" This keeps me centered.
set scrolloff=3

" Helps me find things.
set ruler
set showmatch
set incsearch
set hlsearch

" This was before I found out about \c
set smartcase

" My, that bottom bar can get cluttered...
set shortmess=atI

" Everything else looks like crap.
"colorscheme Tomorrow-Night-Bright

set expandtab

autocmd filetype python set expandtab
autocmd filetype pony set expandtab
autocmd filetype php set expandtab
autocmd filetype coffee set expandtab
autocmd filetype mustache set expandtab
autocmd filetype pony set expandtab

" NERDtree crap
" autocmd vimenter * NERDTree
map <esc>t :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

augroup nemerle
	au!
	autocmd BufNewFile,BufReadPre *.n
		\ set fencs=ucs-bom,utf-8,iso-8859-2 fenc=utf-8
augroup END

augroup Binary
	au!
	au BufReadPre   *.bin let &bin=1
	au BufReadPost  *.bin if &bin | %!xxd
	au BufReadPost  *.bin set ft=xxd | endif
	au BufWritePre  *.bin if &bin | %!xxd -r
	au BufWritePre  *.bin endif
	au BufWritePost *.bin if &bin | %!xxd
	au BufWritePost *.bin set nomod | endif
augroup END

" cscope seems to work a little better than ctags, but Vim doesn't auto-load
" cscope files like it does ctags files.
if has("cscope")
	set cst
	set csto=0
	set nocsverb
	if filereadable("cscope.out")
		cs add cscope.out
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb

	nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

	nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
	nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
	nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

set tags=./tags,tags

let ComniCpp_MayCompleteDot=1
let ComniCpp_MayCompleteArrow=1
let ComniCpp_MayCompleteScope=1

set completeopt=longest,menu

" Search paths for completions.
" Starting with local files and the default includes
set path+=.,/usr/include
" KDE-specific
set path+=/usr/include/KDE,/usr/include/qt4
" boost
set path+=/usr/include/boost

set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"
let g:clang_library_path = '/usr/lib'
let g:clang_auto_select = 1
let g:clang_complete_auto = 1
let g:clang_complete_macros = 1

let g:proj_flags='imstS'

" I often forget to use sudoedit. Much to my chagrin.
cmap w!! %!sudo tee > /dev/null %

" note:  run :PlugUpgrade | PlugInstall | PlugUpdate
call plug#begin('~/.vim/plugged')

Plug 'jceb/vim-orgmode'
Plug 'dleonard0/pony-vim-syntax'
Plug 'Rip-Rip/clang_complete', { 'for': ['cpp', 'cpp11', 'c'], 'do': 'make install' }
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'vim-scripts/ctx'
Plug 'kien/rainbow_parentheses.vim'
Plug 'jaxbot/semantic-highlight.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'altercation/vim-colors-solarized'
Plug 'shemerey/vim-project'
Plug 'tpope/vim-surround'
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'vim-latex/vim-latex'

Plug 'vimwiki/vimwiki'

call plug#end()

let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki/', 'path_html': '~/public_html/'}]

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

au BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window 'vim | " . expand("%:t") . "'")

au BufNewFile,BufRead *.cpp set syntax=cpp11
au BufNewFile,BufRead *.hpp set syntax=cpp11
au BufNewFile,BufRead *.mustache set ft=html

let g:coffee_compiler = "/usr/bin/coffee"
let g:coffee_make_options = ""
au BufNewFile,BufRead *.coffee let b:coffee_litcoffee=""

